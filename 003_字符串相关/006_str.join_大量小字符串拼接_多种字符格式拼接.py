# -*- coding:utf-8 -*-

# 方式1：使用+
# 字符串拼接，一般使用加号
# 实际调用的是str.__add__()方法，可使用dir(str)查看
# print(dir(str))
s1 = 'abc'
s2 = 'def'
s3 = s1 + s2
print(s3)
print("*" * 50)

# 多个小字符串，可以使用迭代，但是该种方法非常消耗资源
# 可以打印出每加一次的结果，字符串越来越长，每次的结果都要消耗内存
# 并且我们只需要最后一个字符串，前面的字符串都是不需要的
pl = ['<025>', '<556>', '<affa>', '<af52>', '<520.25>', '<02899>']
s = ''
for p in pl:
    s += p
    print(s)
print("*" * 50)


# 方式2：str.join  推荐使用
# 大量字符串，直接使用join方法，就不会存在临时性字符串的浪费
s = ''.join(pl)
print(s)
print("*" * 50)
# 也可以加入拼接分割符号
s = ';'.join(pl)
print(s)
print("*" * 50)

# 补充：字符串里面可能含有不同的类型，int的数字，str字符串
# 需要拼接之前将数字转换为字符串，
# 可以使用列表对象或者生成迭代器对象（推荐迭代器对象）
pl = ['<025>', 556, '<affa>', '<af52>', 520.25, '<02899>', 2222555, 88456446]

# 列表对象
s = ''.join([str(x) for x in pl])
print(s)
print("*" * 50)

# 迭代器对象(迭代器对象的括号可以省略)
s = ''.join((str(x) for x in pl))
print(s)
print("*" * 50)