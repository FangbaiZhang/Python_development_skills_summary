# -*- coding:utf-8 -*-

# 可迭代对象：列表为例
s = 'ABC'
l = list(s)
print(l)
print("*" * 100)

# 查看l所有的接口和方法
print(dir(l))
# 查看可迭代接口
# l是一个可迭代的对象
print(l.__iter__())
print("*" * 100)


# 迭代器对象l1
l1 = iter(l)
print(dir(l1))
print(l1)
print("*" * 100)

# 取出迭代器容器中的值，没有值后就抛出异常
print(next(l1))
print(next(l1))
print(next(l1))
print(next(l1))

# 也可以写成：print(l1.__next__())

# 可迭代对象,上面的l
# 迭代器对象，上面的l1

# 那什么对象才能叫做可迭代对象呢？
# 一句话：“实现了__iter__方法的对象就叫做可迭代对象”，
# __iter__方法的作用就是返回一个迭代器对象。
# 直观理解就是能用for循环进行迭代的对象就是可迭代对象。
# 比如：字符串，列表，元祖，字典，集合等等，都是可迭代对象。


# 那么什么叫迭代器呢？它是一个带状态的对象，他能在你调用next()方法的时候返回容器中的下一个值，
# 任何实现了__iter__和__next__()方法的对象都是迭代器，
# __iter__返回迭代器自身，__next__返回容器中的下一个值，
# 如果容器中没有更多元素了，则抛出StopIteration异常。

# 迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，
# 没调用的时候就处于休眠状态等待下一次调用。直到无元素可调用，返回StopIteration异常。

# for循环执行过程：
# 调用可迭代对象的__iter__方法返回一个迭代器对象（iterator）
# 不断调用迭代器的__next__方法返回元素
# 直到迭代完成后，处理StopIteration异常
